---
import { type CollectionEntry, getCollection } from "astro:content";
import CaseStudy from "../../layouts/Case.astro";
import client from "../../../tina/__generated__/client";
import AdminStudy from "../../../tina/pages/AdminStudy";
import { Fragment } from "astro/types";
import { marked } from "marked";

export async function getStaticPaths() {
	const cases = await getCollection("study");

	return cases.map((study) => ({
		params: { slug: study.id },
		props: {
			study,
			getTinaProps: async () => {
				// In dev mode, we use the Tina client. In production, we use
				// static content from Astro's getCollection.
				if (import.meta.env.DEV) {
					try {
						return await client.queries.study({
							relativePath: study.data.tinaInfo.relativePath,
						});
					} catch (error) {
						console.log('TinaCMS query failed, using static content. This is expected if the dev server is not running.');
					}
				}
				// Fallback for static builds - return the post data in TinaCMS format
				return {
					data: {
						study: {
							...study.data,
							body: study.body || '',
							_sys: {
								filename: study.id,
								relativePath: `${study.id}.mdx`
							}
						}
					},
					variables: {
						relativePath: `${study.id}.mdx`
					},
					query: `query study($relativePath: String!) {
						study(relativePath: $relativePath) {
							... on Study {
								title
								description
								pubDate
								body
							}
						}
					}`
				};
			},
		},
	}));
}

const { study, getTinaProps } = Astro.props;
const data = await getTinaProps();
const html = marked(study.body || "");
---

<CaseStudy {...data}>
	{import.meta.env.DEV ? (
		<AdminStudy {...data} client:tina/>
	) : (
		<div set:html={html} />
	)}
</BlogPost>
