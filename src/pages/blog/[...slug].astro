---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro"
import client from "../../../tina/__generated__/client";
import AdminBlogPost from "../../../tina/pages/AdminBlogPost";
import { Fragment } from "astro/types";

export async function getStaticPaths() {
	const posts = await getCollection("blog");

	return posts.map((post) => ({
		params: { slug: post.id },
		props: {
			post,
			getTinaProps: async () => {
				// In dev mode, we use the Tina client. In production, we use
				// static content from Astro's getCollection.
				if (import.meta.env.DEV) {
					try {
						return await client.queries.blog({
							relativePath: post.data.tinaInfo.relativePath,
						});
					} catch (error) {
						console.log('TinaCMS query failed, using static content. This is expected if the dev server is not running.');
					}
				}
				// Fallback for static builds - return the post data in TinaCMS format
				return {
					data: {
						blog: {
							...post.data,
							body: post.body || '',
							_sys: {
								filename: post.id,
								relativePath: `${post.id}.mdx`
							}
						}
					},
					variables: {
						relativePath: `${post.id}.mdx`
					},
					query: `query blog($relativePath: String!) {
						blog(relativePath: $relativePath) {
							... on Blog {
								title
								description
								pubDate
								heroImage
								body
							}
						}
					}`
				};
			},
		},
	}));
}

const { post, getTinaProps } = Astro.props;
const tinaProps = await getTinaProps();
---

<BlogPost {...tinaProps}>
	{import.meta.env.DEV ? (
		<AdminBlogPost {...tinaProps} client:tina/>
	) : (
		<div set:html={post.body} />
	)}
</BlogPost>
