---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro"
import client from "../../../tina/__generated__/client";
import AdminBlogPost from "../../../tina/pages/AdminBlogPost";

export async function getStaticPaths() {
	const posts = await getCollection("blog");

	return posts.map((post) => ({
		params: { slug: post.id },
		props: {
			post,
			getTinaProps: async () => {
				// Check if TinaCMS data is available (dev mode)
				if (post.data.tinaInfo?.relativePath) {
					try {
						return await client.queries.blog({
							relativePath: post.data.tinaInfo.relativePath,
						});
					} catch (error) {
						console.warn('TinaCMS query failed, using static content:', error.message);
					}
				}
				// Fallback for static builds - return the post data in TinaCMS format
				return {
					data: {
						blog: {
							...post.data,
							body: post.body || '',
							_sys: {
								filename: post.id,
								relativePath: `${post.id}.mdx`
							}
						}
					}
				};
			},
		},
	}));
}

const { post, getTinaProps } = Astro.props;
const tinaProps = await getTinaProps();
---

<BlogPost {...tinaProps}>
		<AdminBlogPost {...tinaProps} client:tina/>
</BlogPost>
