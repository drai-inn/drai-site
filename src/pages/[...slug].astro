---
import { getCollection } from "astro:content";
import client from "../../tina/__generated__/client";
import Page from "../../tina/pages/Page";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import BaseHead from "../components/BaseHead.astro";
import config from '../content/config/config.json';

export async function getStaticPaths() {
	const pages = await getCollection("page");
	return pages.map((p) => ({
		params: { slug: p.id },
		props: {
			page: p,
			getTinaProps: async () => {
				// Check if TinaCMS data is available (dev mode)
				if (p.data.tinaInfo?.relativePath) {
					try {
						return await client.queries.page({
							relativePath: p.data.tinaInfo.relativePath,
						});
					} catch (error) {
						console.warn('TinaCMS query failed for page, using static content:', error.message);
					}
				}
				// Fallback for static builds - return the page data in TinaCMS format
				return {
					data: {
						page: {
							...p.data,
							body: p.body || '',
							_sys: {
								filename: p.id,
								relativePath: `${p.id}.mdx`
							}
						}
					}
				};
			},
		},
	}));
}

const { getTinaProps } = Astro.props;
const data = await getTinaProps();
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={data.data.page.seoTitle} description={config.seo.description} />
	</head>
	<body>
		<Header />
				<Page {...data} client:tina />
		<Footer />
	</body>
</html>

